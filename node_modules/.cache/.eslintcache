[{"/Users/jsliu/Desktop/dining-hall-app/src/index.js":"1","/Users/jsliu/Desktop/dining-hall-app/src/App.js":"2","/Users/jsliu/Desktop/dining-hall-app/src/reportWebVitals.js":"3","/Users/jsliu/Desktop/dining-hall-app/src/pages/Home.jsx":"4","/Users/jsliu/Desktop/dining-hall-app/src/utils/requests.js":"5","/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx":"6","/Users/jsliu/Desktop/dining-hall-app/src/components/input-hook.jsx":"7"},{"size":535,"mtime":1650853285809,"results":"8","hashOfConfig":"9"},{"size":955,"mtime":1651030232146,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1650836851217,"results":"11","hashOfConfig":"9"},{"size":358,"mtime":1651031392671,"results":"12","hashOfConfig":"9"},{"size":326,"mtime":1650909293125,"results":"13","hashOfConfig":"9"},{"size":13311,"mtime":1651034041728,"results":"14","hashOfConfig":"9"},{"size":317,"mtime":1651033959851,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"c6lg21",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/jsliu/Desktop/dining-hall-app/src/index.js",[],[],[],"/Users/jsliu/Desktop/dining-hall-app/src/App.js",["41","42","43","44"],[],"import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Home from './pages/Home';\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\n\nfunction getDaysFacts(props) {\n  let day = props.day; // year-month-day e.g. 2022-01-11\n  let diningHall = props.diningHall;\n  let meal = props.meal.toUpperCase(); // breakfast, brunch, lunch, dinner\n  let url = `https://michigan-dining-api.tendiesti.me/v1/menus?date=${day}&diningHall=${diningHall}%20Dining%20Hall&meal=${meal}`;\n\n}\n\nfunction LoadFacts(props) {\n  return (\n    <button className=\"loadButton\" onClick={() => this.props.onClick()}>\n      \"hi\"\n    </button>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home/>}></Route>\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/jsliu/Desktop/dining-hall-app/src/reportWebVitals.js",[],[],"/Users/jsliu/Desktop/dining-hall-app/src/pages/Home.jsx",["45","46"],[],"\nimport React, { useEffect, useState } from 'react';\nimport {MainForm} from '../components/Form';\nimport Typography from '@mui/material/Typography';\n\n\nconst Home = () => {\n    return (\n        <div>\n        <Typography variant=\"h2\">UMich Dining Facts Calculator</Typography>\n        <MainForm /> {MainForm.value}\n        </div>\n    );\n}\n\nexport default Home;","/Users/jsliu/Desktop/dining-hall-app/src/utils/requests.js",[],[],"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx",["47","48","49","50","51","52","53","54","55","56","57"],[],"\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\nimport TextField from '@mui/material/TextField';\n\n\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n    const [dh, setDh] = useState('')\n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n\n    const [calculate, setCalculate] = useState(false)\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1, \n        Beef: 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const combineCalculate = (boolVal) => {\n        setCalculate(boolVal)\n        let [cals, protein, carbs, fats] = calculateTotal()\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        console.log(carbs)\n        return\n    }\n\n    const displayCalculate = () => {\n        return (\n            <>\n                <div className=\"nutrition-header\">Nutrition Facts</div>\n                <ul className=\"nutrition-items\">\n                    {/* <li>{names}</li> */}\n                    <li>Calories: {cals}</li>\n                    <li>Protein: {protein}</li>\n                    <li>Total Carbohydrate: {carbs}</li>\n                    <li>Total Fat: {fats}</li>\n                </ul>\n            </>\n        )\n    }\n    const updateMenus = () => {\n        // tempFoodDisplay = {}\n        let tempFoodFacts = {}\n        let tempFoodDisplay = {}\n        let tempFoodAmounts = {}\n        setFoodAmounts({})\n        console.log(foodAmounts)\n        menus[0].category.map((categoryItem, index) => {\n            // foodAmounts[categoryItem.name] = 0\n            let tempCategoryObject = {}\n            let tempFoodFactsSingle = {}\n            tempCategoryObject[categoryItem.name] = []\n            categoryItem.menuItem.map((menuItem, index) => {\n                const tempMenuItem = {}\n                tempMenuItem[menuItem.name] = 0\n                tempFoodAmounts = ({...tempFoodAmounts, ...tempMenuItem})\n                tempCategoryObject[categoryItem.name].push(menuItem.name)\n                let foodFactsObject = {}\n                foodFactsObject[menuItem.name] = {}\n                \n                menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                    foodFactsObject[menuItem.name][\"Beef\"] = \"three\"\n                    // console.log(nutritionalItem.value)\n                    // let includeItem = false\n                    if (nutritionalItem.name === \"Calories\"){\n                        // console.log(nutritionalItem.value)\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Protein\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Carbohydrate\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Fat\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n\n                    // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                    // const newFoodFacts = {\n                    //     ...foodFacts,\n                    //     ...(includeItem && {\"three\": nutritionalItem['value']})\n                    // }\n                    // foodFacts = newFoodFacts\n                })\n                tempFoodFactsSingle = {...tempFoodFactsSingle, ...foodFactsObject}\n                // setFoodFacts({...foodFacts, ...foodFactsObject})\n            })\n            tempFoodFacts = {...tempFoodFacts, ...tempFoodFactsSingle}\n            console.log(tempFoodFacts)\n            // console.log(tempCategoryObject)\n            tempFoodDisplay = {...tempFoodDisplay, ...tempCategoryObject}\n        })\n        setFoodFacts({...tempFoodFacts})\n        setFoodDisplay({...tempFoodDisplay})\n        setFoodAmounts({...tempFoodAmounts})\n        // console.log(tempFoodAmounts)\n        // console.log(foodAmounts)\n        // console.log(foodFacts)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodFacts)\n    }\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input className=\"amount-form-single\" type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if(val !== 0){\n                if(foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Calories')\n                }\n                if(foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Protein')\n                }\n                if(foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if(foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return [cals, protein, carbs, fats]\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [menus]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit} className=\"main-form\">\n                <label>\n                    Dining Hall:\n                    {/* {...bindDiningHall} */}\n                    <select {...bindDiningHall}>\n                        <option defaultValue=\"Bursley\">Bursley</option>\n                        <option value=\"South Quad\">South Quad</option>\n                        <option value=\"East Quad\">East Quad</option>\n                        <option value=\"Mosher Jordan\">Mosher Jordan</option>\n                    </select>\n                    {/* <input type=\"text\" {...bindDiningHall} /> */}\n                </label>\n                <label>\n                    Date:\n                    <input type=\"date\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <select {...bindMeal}>\n                        <option value=\"Breakfast\">Breakfast</option>\n                        <option value=\"Brunch\">Brunch</option>\n                        <option value=\"Lunch\">Lunch</option>\n                        <option value=\"Linner\">Linner</option>\n                        <option value=\"Dinner\">Dinner</option>\n                    </select>\n                </label>\n            </form>\n            <button className=\"buttons\" onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            <button className=\"buttons\" onClick={() => updateMenus()}>Update Menus</button>\n            {/* {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            } */}\n            <form className=\"amount-form\">\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button className=\"buttons\" onClick={() => {\n                combineCalculate(true)\n            } }>Calculate</button>\n            {\n                calculate ?\n                displayCalculate() :\n                null\n            }\n            {/* <div></div> */}\n        </div>\n    );\n}","/Users/jsliu/Desktop/dining-hall-app/src/components/input-hook.jsx",[],[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":12,"column":10,"nodeType":"60","messageId":"61","endLine":12,"endColumn":22},{"ruleId":"58","severity":1,"message":"63","line":16,"column":7,"nodeType":"60","messageId":"61","endLine":16,"endColumn":10},{"ruleId":"58","severity":1,"message":"64","line":20,"column":10,"nodeType":"60","messageId":"61","endLine":20,"endColumn":19},{"ruleId":"58","severity":1,"message":"65","line":2,"column":17,"nodeType":"60","messageId":"61","endLine":2,"endColumn":26},{"ruleId":"58","severity":1,"message":"66","line":2,"column":28,"nodeType":"60","messageId":"61","endLine":2,"endColumn":36},{"ruleId":"58","severity":1,"message":"65","line":2,"column":27,"nodeType":"60","messageId":"61","endLine":2,"endColumn":36},{"ruleId":"58","severity":1,"message":"67","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":17},{"ruleId":"58","severity":1,"message":"68","line":10,"column":58,"nodeType":"60","messageId":"61","endLine":10,"endColumn":73},{"ruleId":"58","severity":1,"message":"69","line":11,"column":46,"nodeType":"60","messageId":"61","endLine":11,"endColumn":55},{"ruleId":"58","severity":1,"message":"70","line":12,"column":46,"nodeType":"60","messageId":"61","endLine":12,"endColumn":55},{"ruleId":"58","severity":1,"message":"71","line":13,"column":12,"nodeType":"60","messageId":"61","endLine":13,"endColumn":14},{"ruleId":"58","severity":1,"message":"72","line":13,"column":16,"nodeType":"60","messageId":"61","endLine":13,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":113,"column":53,"nodeType":"75","messageId":"76","endLine":113,"endColumn":55},{"ruleId":"73","severity":1,"message":"74","line":118,"column":57,"nodeType":"75","messageId":"76","endLine":118,"endColumn":59},{"ruleId":"73","severity":1,"message":"74","line":126,"column":84,"nodeType":"75","messageId":"76","endLine":126,"endColumn":86},{"ruleId":"73","severity":1,"message":"74","line":203,"column":54,"nodeType":"75","messageId":"76","endLine":203,"endColumn":56},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'getDaysFacts' is defined but never used.","'url' is assigned a value but never used.","'LoadFacts' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'TextField' is defined but never used.","'resetDiningHall' is assigned a value but never used.","'resetDate' is assigned a value but never used.","'resetMeal' is assigned a value but never used.","'dh' is assigned a value but never used.","'setDh' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]
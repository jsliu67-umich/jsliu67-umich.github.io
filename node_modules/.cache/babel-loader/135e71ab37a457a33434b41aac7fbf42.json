{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MainForm(props) {\n  _s();\n\n  const {\n    value: diningHall,\n    bind: bindDiningHall,\n    reset: resetDiningHall\n  } = useInput('');\n  const {\n    value: date,\n    bind: bindDate,\n    reset: resetDate\n  } = useInput('');\n  const {\n    value: meal,\n    bind: bindMeal,\n    reset: resetMeal\n  } = useInput(''); // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n  let [calculate, setCalculate] = useState(false);\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [{\n        name: \"\",\n        itemSizes: [{\n          nutritionalInfo: [{\n            name: \"\",\n            value: \"\"\n          }]\n        }]\n      }]\n    }]\n  }]);\n  let [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  let [foodAmounts, setFoodAmounts] = useState({\n    Chicken: 1,\n    Beef: 2\n  });\n  let [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    }\n  });\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const fetchMenus = async (diningHall, date, meal) => {\n    diningHall = diningHall.replace(' ', '%20');\n    meal = meal.toUpperCase();\n    const data = await getMenus(diningHall, date, meal);\n    setMenus(data);\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: num => {\n          console.log(num);\n          let tempFoodAmounts = foodAmounts;\n          tempFoodAmounts[val] = num.nativeEvent.data;\n          console.log(tempFoodAmounts);\n          setFoodAmounts(tempFoodAmounts);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, val, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0;\n    let names = [];\n    Object.entries(foodAmounts).map(_ref => {\n      let [key, val] = _ref;\n      let object = foodFacts[key];\n      cals += object[\"Calories\"] !== 'Chicken' ? 0 : parseInt(object[\"Calories\"]) * parseInt(val);\n      names.push(key + '|');\n      console.log(foodFacts);\n      console.log(foodAmounts); // console.log(key)\n      // console.log(object[\"Calories\"])\n      // protein += (foodFacts[key].Protein * val)\n      // carbs += (foodFacts[key].Carbs * val)\n      // fats += (foodFacts[key].Fats * val)\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: names\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Total Calories: \", cals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Protein: \", protein]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Carbs: \", carbs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Fats: \", fats]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }; // useEffect(() => {\n  //     // Update the document title using the browser API\n  //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n  // }, [menus]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dining Hall:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDiningHall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Meal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchMenus(diningHall, date, meal),\n        children: \"Get Menus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), // let url = \n    menus[0].category.map((categoryItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryItem.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }, this)), // tempFoodDisplay = {}\n    menus[0].category.map((categoryItem, index) => {\n      // foodAmounts[categoryItem.name] = 0\n      let tempCategory = categoryItem.name;\n      let tempCategoryObject = {};\n      tempCategoryObject[tempCategory] = [];\n      categoryItem.menuItem.map((menuItem, index) => {\n        foodAmounts[menuItem.name] = 1;\n        tempCategoryObject[tempCategory].push(menuItem.name);\n        menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n          foodFacts[menuItem.name] = {};\n          console.log(nutritionalItem.name);\n\n          if (nutritionalItem.name === \"Calories\") {\n            console.log(nutritionalItem.value);\n            foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Protein\") {\n            foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Carbs\") {\n            foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Fat\") {\n            foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          }\n        });\n      });\n      foodDisplay = Object.assign(foodDisplay, tempCategoryObject);\n    }), Object.entries(foodDisplay).map(_ref2 => {\n      let [key, value] = _ref2;\n      return Object.entries(value).map(_ref3 => {\n        let [key2, value2] = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: value2\n        }, key2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this);\n      });\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: Object.entries(foodDisplay).map(_ref4 => {\n        let [key, value] = _ref4;\n        return Object.entries(value).map(_ref5 => {\n          let [key2, value2] = _ref5;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalculate(true),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), calculate ? calculateTotal() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainForm, \"boOuafisE2Wq+kBovuRszWcaz0M=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = MainForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","MainForm","props","value","diningHall","bind","bindDiningHall","reset","resetDiningHall","date","bindDate","resetDate","meal","bindMeal","resetMeal","calculate","setCalculate","menus","setMenus","category","name","menuItem","itemSizes","nutritionalInfo","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","Chicken","Beef","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","fetchMenus","replace","toUpperCase","data","amountInput","val","num","console","log","tempFoodAmounts","nativeEvent","calculateTotal","cals","protein","carbs","fats","names","Object","entries","map","key","object","parseInt","push","categoryItem","index","tempCategory","tempCategoryObject","nutritionalItem","assign","key2","value2"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n    let [calculate, setCalculate] = useState(false)\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }]\n        }]\n    );\n    let [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    let [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1, \n        Beef: 2\n    })\n    let [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input type=\"number\" onChange={num => {\n                    console.log(num)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.nativeEvent.data\n                    console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        let names = []\n        Object.entries(foodAmounts).map(([key, val]) => {\n            let object = foodFacts[key]\n            cals += (object[\"Calories\"] !== 'Chicken') ? 0 : (parseInt(object[\"Calories\"]) * parseInt(val))\n            names.push(key + '|')\n            console.log(foodFacts)\n            console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return (\n            <ul>\n                <li>{names}</li>\n                <li>Total Calories: {cals}</li>\n                <li>Protein: {protein}</li>\n                <li>Carbs: {carbs}</li>\n                <li>Fats: {fats}</li>\n            </ul>\n        )\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [menus]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Dining Hall:\n                    <input type=\"text\" {...bindDiningHall} />\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n                <br></br>\n                <button onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            </form>\n            {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                // tempFoodDisplay = {}\n                menus[0].category.map((categoryItem, index) => {\n                    // foodAmounts[categoryItem.name] = 0\n                    let tempCategory = categoryItem.name\n                    let tempCategoryObject = {}\n                    tempCategoryObject[tempCategory] = []\n                    categoryItem.menuItem.map((menuItem, index) => {\n                        foodAmounts[menuItem.name] = 1\n                        tempCategoryObject[tempCategory].push(menuItem.name)\n                        menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                            foodFacts[menuItem.name] = {}\n                            console.log(nutritionalItem.name)\n                            if (nutritionalItem.name === \"Calories\"){\n                                console.log(nutritionalItem.value)\n                                foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                            }\n                            else if (nutritionalItem.name === \"Protein\"){\n                                foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                            }\n                            else if (nutritionalItem.name === \"Total Carbs\"){\n                                foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                            }\n                            else if (nutritionalItem.name === \"Total Fat\"){\n                                foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                            }\n                        })\n                    })\n                    foodDisplay = (Object.assign(foodDisplay, tempCategoryObject))\n                })\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            }\n            <form>\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button onClick={() => setCalculate(true)}>Calculate</button>\n            {calculate ?\n                calculateTotal() :\n                null\n            }\n            {/* <div></div> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
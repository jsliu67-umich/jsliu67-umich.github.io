{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/AddFoodForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AddFoodForm(props) {\n  _s();\n\n  const [cals, setCals] = useState(0.0);\n  const [protein, setProtein] = useState(0.0);\n  const [carbs, setCarbs] = useState(0.0);\n  const [fats, setFats] = useState(0.0);\n  const [calculate, setCalculate] = useState(false);\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [{\n        name: \"\",\n        itemSizes: [{\n          nutritionalInfo: [{\n            name: \"\",\n            value: \"\"\n          }]\n        }]\n      }]\n    }, {}]\n  }]);\n  const [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  const [foodAmounts, setFoodAmounts] = useState({\n    Chicken: 1,\n    Beef: 2\n  });\n  const [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    }\n  });\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const combineCalculate = boolVal => {\n    setCalculate(boolVal);\n    let [cals, protein, carbs, fats] = calculateTotal();\n    setCals(cals);\n    setProtein(protein);\n    setCarbs(carbs);\n    setFats(fats);\n    console.log(carbs);\n    return;\n  };\n\n  const displayCalculate = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nutrition-header\",\n        children: \"Nutrition Facts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nutrition-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Calories: \", cals]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Protein: \", protein]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Carbohydrate: \", carbs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Fat: \", fats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const updateMenus = () => {\n    // tempFoodDisplay = {}\n    let tempFoodFacts = {};\n    let tempFoodDisplay = {};\n    let tempFoodAmounts = {};\n    setFoodAmounts({});\n    console.log(foodAmounts);\n    menus[0].category.map((categoryItem, index) => {\n      // foodAmounts[categoryItem.name] = 0\n      let tempCategoryObject = {};\n      let tempFoodFactsSingle = {};\n      tempCategoryObject[categoryItem.name] = [];\n      categoryItem.menuItem.map((menuItem, index) => {\n        const tempMenuItem = {};\n        tempMenuItem[menuItem.name] = 0;\n        tempFoodAmounts = { ...tempFoodAmounts,\n          ...tempMenuItem\n        };\n        tempCategoryObject[categoryItem.name].push(menuItem.name);\n        let foodFactsObject = {};\n        foodFactsObject[menuItem.name] = {};\n\n        if ('nutritionalInfo' in menuItem.itemSizes[0]) {\n          menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n            foodFactsObject[menuItem.name][\"Beef\"] = \"three\"; // console.log(nutritionalItem.value)\n            // let includeItem = false\n\n            if (nutritionalItem.name === \"Calories\") {\n              // console.log(nutritionalItem.value)\n              // includeItem = true\n              foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n            } else if (nutritionalItem.name === \"Protein\") {\n              // includeItem = true\n              foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n            } else if (nutritionalItem.name === \"Total Carbohydrate\") {\n              // includeItem = true\n              foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n            } else if (nutritionalItem.name === \"Total Fat\") {\n              // includeItem = true\n              foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n            } // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n            // const newFoodFacts = {\n            //     ...foodFacts,\n            //     ...(includeItem && {\"three\": nutritionalItem['value']})\n            // }\n            // foodFacts = newFoodFacts\n\n          });\n          tempFoodFactsSingle = { ...tempFoodFactsSingle,\n            ...foodFactsObject\n          };\n        } else {\n          console.log(`${menuItem.name} is missing nutrition facts`);\n        } // setFoodFacts({...foodFacts, ...foodFactsObject})\n\n      });\n      tempFoodFacts = { ...tempFoodFacts,\n        ...tempFoodFactsSingle\n      };\n      console.log(tempFoodFacts); // console.log(tempCategoryObject)\n\n      tempFoodDisplay = { ...tempFoodDisplay,\n        ...tempCategoryObject\n      };\n    });\n    setFoodFacts({ ...tempFoodFacts\n    });\n    setFoodDisplay({ ...tempFoodDisplay\n    });\n    setFoodAmounts({ ...tempFoodAmounts\n    });\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"amount-form-single\",\n        type: \"text\",\n        onChange: num => {\n          // console.log(num.target.value)\n          let tempFoodAmounts = foodAmounts;\n          tempFoodAmounts[val] = num.target.value; // console.log(tempFoodAmounts)\n\n          setFoodAmounts(tempFoodAmounts);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, val, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0; // setCalculate(false)\n\n    console.log(foodAmounts);\n\n    function printMissing(missing, value) {\n      console.log(`${missing}: ${value} missing`);\n    }\n\n    Object.entries(foodAmounts).map(_ref => {\n      let [key, val] = _ref;\n\n      // let object = foodFacts[key]\n      // console.log(key)\n      // console.log(val)\n      // console.log(protein)\n      // console.log(foodFacts[key][\"Protein\"])\n      // if value missing, console.log it. else, += it\n      if (val !== 0) {\n        if (foodFacts[key][\"Calories\"] !== undefined) {\n          // console.log(val)\n          // rounds number to 2 decimal places\n          // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n          cals += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Calories');\n        }\n\n        if (foodFacts[key][\"Protein\"] !== undefined) {\n          // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n          protein += Math.round(foodFacts[key][\"Protein\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Protein');\n        }\n\n        if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n          // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n          carbs += Math.round(foodFacts[key][\"Total Carbohydrate\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Carbohydrate');\n        }\n\n        if (foodFacts[key][\"Total Fat\"] !== undefined) {\n          // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n          fats += Math.round(foodFacts[key][\"Total Fat\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Fat');\n        }\n      } // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n      // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n      // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n      // cals += foodFacts[key][\"Calories\"] * val\n      // protein += foodFacts[key][\"Protein\"] * val\n      // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // fats += foodFacts[key][\"Total Fat\"] * val\n      // console.log(cals)\n      // names.push(key + '|')\n      // console.log(foodFacts)\n      // console.log(foodAmounts)\n      // console.log(key)\n      // console.log(object[\"Calories\"])\n      // protein += (foodFacts[key].Protein * val)\n      // carbs += (foodFacts[key].Carbs * val)\n      // fats += (foodFacts[key].Fats * val)\n\n    });\n    return [cals, protein, carbs, fats];\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"amount-form\",\n      children: Object.entries(foodDisplay).map(_ref2 => {\n        let [key, value] = _ref2;\n        return Object.entries(value).map(_ref3 => {\n          let [key2, value2] = _ref3;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttons\",\n      onClick: () => {\n        combineCalculate(true);\n      },\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), calculate ? displayCalculate() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddFoodForm, \"9qtwZ6zSE7+SxZiRh8DVmxUMAUM=\");\n\n_c = AddFoodForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFoodForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/AddFoodForm.jsx"],"names":["React","useState","useEffect","useInput","getMenus","AddFoodForm","props","cals","setCals","protein","setProtein","carbs","setCarbs","fats","setFats","calculate","setCalculate","menus","setMenus","category","name","menuItem","itemSizes","nutritionalInfo","value","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","Chicken","Beef","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","combineCalculate","boolVal","calculateTotal","console","log","displayCalculate","updateMenus","tempFoodFacts","tempFoodDisplay","tempFoodAmounts","map","categoryItem","index","tempCategoryObject","tempFoodFactsSingle","tempMenuItem","push","foodFactsObject","nutritionalItem","amountInput","val","num","target","printMissing","missing","Object","entries","key","undefined","Math","round","key2","value2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests'\n\nexport function AddFoodForm(props) {\n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n    const [calculate, setCalculate] = useState(false)\n    \n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1,\n        Beef: 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300,\n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const combineCalculate = (boolVal) => {\n        setCalculate(boolVal)\n        let [cals, protein, carbs, fats] = calculateTotal()\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        console.log(carbs)\n        return\n    }\n\n    const displayCalculate = () => {\n        return (\n            <>\n                <div className=\"nutrition-header\">Nutrition Facts</div>\n                <ul className=\"nutrition-items\">\n                    {/* <li>{names}</li> */}\n                    <li>Calories: {cals}</li>\n                    <li>Protein: {protein}</li>\n                    <li>Total Carbohydrate: {carbs}</li>\n                    <li>Total Fat: {fats}</li>\n                </ul>\n            </>\n        )\n    }\n    const updateMenus = () => {\n        // tempFoodDisplay = {}\n        let tempFoodFacts = {}\n        let tempFoodDisplay = {}\n        let tempFoodAmounts = {}\n        setFoodAmounts({})\n        console.log(foodAmounts)\n        menus[0].category.map((categoryItem, index) => {\n            // foodAmounts[categoryItem.name] = 0\n            let tempCategoryObject = {}\n            let tempFoodFactsSingle = {}\n            tempCategoryObject[categoryItem.name] = []\n            categoryItem.menuItem.map((menuItem, index) => {\n                const tempMenuItem = {}\n                tempMenuItem[menuItem.name] = 0\n                tempFoodAmounts = ({ ...tempFoodAmounts, ...tempMenuItem })\n                tempCategoryObject[categoryItem.name].push(menuItem.name)\n                let foodFactsObject = {}\n                foodFactsObject[menuItem.name] = {}\n                if ('nutritionalInfo' in menuItem.itemSizes[0]) {\n                    menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                        foodFactsObject[menuItem.name][\"Beef\"] = \"three\"\n                        // console.log(nutritionalItem.value)\n                        // let includeItem = false\n                        if (nutritionalItem.name === \"Calories\") {\n                            // console.log(nutritionalItem.value)\n                            // includeItem = true\n                            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                        }\n                        else if (nutritionalItem.name === \"Protein\") {\n                            // includeItem = true\n                            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                        }\n                        else if (nutritionalItem.name === \"Total Carbohydrate\") {\n                            // includeItem = true\n                            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                        }\n                        else if (nutritionalItem.name === \"Total Fat\") {\n                            // includeItem = true\n                            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                        }\n\n                        // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                        // const newFoodFacts = {\n                        //     ...foodFacts,\n                        //     ...(includeItem && {\"three\": nutritionalItem['value']})\n                        // }\n                        // foodFacts = newFoodFacts\n                    })\n                    tempFoodFactsSingle = { ...tempFoodFactsSingle, ...foodFactsObject }\n                }\n                else {\n                    console.log(`${menuItem.name} is missing nutrition facts`)\n                }\n                // setFoodFacts({...foodFacts, ...foodFactsObject})\n            })\n            tempFoodFacts = { ...tempFoodFacts, ...tempFoodFactsSingle }\n            console.log(tempFoodFacts)\n            // console.log(tempCategoryObject)\n            tempFoodDisplay = { ...tempFoodDisplay, ...tempCategoryObject }\n        })\n        setFoodFacts({ ...tempFoodFacts })\n        setFoodDisplay({ ...tempFoodDisplay })\n        setFoodAmounts({ ...tempFoodAmounts })\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input className=\"amount-form-single\" type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if (val !== 0) {\n                if (foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Calories')\n                }\n                if (foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Protein\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Protein')\n                }\n                if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if (foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return [cals, protein, carbs, fats]\n    }\n\n    return (\n        <div>\n            <form className=\"amount-form\">\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button className=\"buttons\" onClick={() => {\n                combineCalculate(true)\n            }}>Calculate</button>\n            {\n                calculate ?\n                    displayCalculate() :\n                    null\n            }\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}
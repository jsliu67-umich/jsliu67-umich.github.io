{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function MainForm(props) {\n  _s();\n\n  const {\n    value: diningHall,\n    bind: bindDiningHall,\n    reset: resetDiningHall\n  } = useInput('');\n  const {\n    value: date,\n    bind: bindDate,\n    reset: resetDate\n  } = useInput('');\n  const {\n    value: meal,\n    bind: bindMeal,\n    reset: resetMeal\n  } = useInput(''); // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n  const [cals, setCals] = useState(0.0);\n  const [protein, setProtein] = useState(0.0);\n  const [carbs, setCarbs] = useState(0.0);\n  const [fats, setFats] = useState(0.0);\n  const [calculate, setCalculate] = useState(false);\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [{\n        name: \"\",\n        itemSizes: [{\n          nutritionalInfo: [{\n            name: \"\",\n            value: \"\"\n          }]\n        }]\n      }]\n    }, {}]\n  }]);\n  const [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  const [foodAmounts, setFoodAmounts] = useState({\n    Chicken: 1,\n    Beef: 2\n  });\n  const [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    }\n  });\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const combineCalculate = boolVal => {\n    setCalculate(boolVal);\n    let [cals, protein, carbs, fats] = calculateTotal();\n    setCals(cals);\n    setProtein(protein);\n    setCarbs(carbs);\n    setFats(fats);\n    console.log(carbs);\n    return;\n  };\n\n  const displayCalculate = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nutrition-header\",\n        children: \"Nutrition Facts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nutrition-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Calories: \", cals]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Protein: \", protein]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Carbohydrate: \", carbs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Fat: \", fats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const updateMenus = () => {\n    // tempFoodDisplay = {}\n    let tempFoodFacts = {};\n    let tempFoodDisplay = {};\n    let tempFoodAmounts = {};\n    setFoodAmounts({});\n    console.log(foodAmounts);\n    menus[0].category.map((categoryItem, index) => {\n      // foodAmounts[categoryItem.name] = 0\n      let tempCategoryObject = {};\n      let tempFoodFactsSingle = {};\n      tempCategoryObject[categoryItem.name] = [];\n      categoryItem.menuItem.map((menuItem, index) => {\n        const tempMenuItem = {};\n        tempMenuItem[menuItem.name] = 0;\n        tempFoodAmounts = { ...tempFoodAmounts,\n          ...tempMenuItem\n        };\n        tempCategoryObject[categoryItem.name].push(menuItem.name);\n        let foodFactsObject = {};\n        foodFactsObject[menuItem.name] = {};\n        menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n          foodFactsObject[menuItem.name][\"Beef\"] = \"three\"; // console.log(nutritionalItem.value)\n          // let includeItem = false\n\n          if (nutritionalItem.name === \"Calories\") {\n            // console.log(nutritionalItem.value)\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Protein\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Carbohydrate\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Fat\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n          // const newFoodFacts = {\n          //     ...foodFacts,\n          //     ...(includeItem && {\"three\": nutritionalItem['value']})\n          // }\n          // foodFacts = newFoodFacts\n\n        });\n        tempFoodFactsSingle = { ...tempFoodFactsSingle,\n          ...foodFactsObject\n        }; // setFoodFacts({...foodFacts, ...foodFactsObject})\n      });\n      tempFoodFacts = { ...tempFoodFacts,\n        ...tempFoodFactsSingle\n      };\n      console.log(tempFoodFacts); // console.log(tempCategoryObject)\n\n      tempFoodDisplay = { ...tempFoodDisplay,\n        ...tempCategoryObject\n      };\n    });\n    setFoodFacts({ ...tempFoodFacts\n    });\n    setFoodDisplay({ ...tempFoodDisplay\n    });\n    setFoodAmounts({ ...tempFoodAmounts\n    }); // console.log(tempFoodAmounts)\n    // console.log(foodAmounts)\n    // console.log(foodFacts)\n    // console.log(foodDisplay)\n    // console.log(foodDisplay)\n    // console.log(foodDisplay)\n    // console.log(foodFacts)\n  };\n\n  const fetchMenus = async (diningHall, date, meal) => {\n    diningHall = diningHall.replace(' ', '%20');\n    meal = meal.toUpperCase();\n    const data = await getMenus(diningHall, date, meal);\n    setMenus(data);\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"amount-form-single\",\n        type: \"text\",\n        onChange: num => {\n          // console.log(num.target.value)\n          let tempFoodAmounts = foodAmounts;\n          tempFoodAmounts[val] = num.target.value; // console.log(tempFoodAmounts)\n\n          setFoodAmounts(tempFoodAmounts);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, val, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0; // setCalculate(false)\n\n    console.log(foodAmounts);\n\n    function printMissing(missing, value) {\n      console.log(`${missing}: ${value} missing`);\n    }\n\n    Object.entries(foodAmounts).map(_ref => {\n      let [key, val] = _ref;\n\n      // let object = foodFacts[key]\n      // console.log(key)\n      // console.log(val)\n      // console.log(protein)\n      // console.log(foodFacts[key][\"Protein\"])\n      // if value missing, console.log it. else, += it\n      if (val !== 0) {\n        if (foodFacts[key][\"Calories\"] !== undefined) {\n          // console.log(val)\n          // rounds number to 2 decimal places\n          // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n          cals += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Calories');\n        }\n\n        if (foodFacts[key][\"Protein\"] !== undefined) {\n          // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n          protein += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Protein');\n        }\n\n        if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n          // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n          carbs += Math.round(foodFacts[key][\"Total Carbohydrate\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Carbohydrate');\n        }\n\n        if (foodFacts[key][\"Total Fat\"] !== undefined) {\n          // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n          fats += Math.round(foodFacts[key][\"Total Fat\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Fat');\n        }\n      } // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n      // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n      // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n      // cals += foodFacts[key][\"Calories\"] * val\n      // protein += foodFacts[key][\"Protein\"] * val\n      // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // fats += foodFacts[key][\"Total Fat\"] * val\n      // console.log(cals)\n      // names.push(key + '|')\n      // console.log(foodFacts)\n      // console.log(foodAmounts)\n      // console.log(key)\n      // console.log(object[\"Calories\"])\n      // protein += (foodFacts[key].Protein * val)\n      // carbs += (foodFacts[key].Carbs * val)\n      // fats += (foodFacts[key].Fats * val)\n\n    });\n    return [cals, protein, carbs, fats];\n  }; // useEffect(() => {\n  //     // Update the document title using the browser API\n  //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n  // }, [menus]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"main-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dining Hall:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grapefruit\",\n            children: \"Grapefruit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"lime\",\n            children: \"Lime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            value: \"coconut\",\n            children: \"Coconut\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mango\",\n            children: \"Mango\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Meal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttons\",\n      onClick: () => fetchMenus(diningHall, date, meal),\n      children: \"Get Menus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttons\",\n      onClick: () => updateMenus(),\n      children: \"Update Menus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"amount-form\",\n      children: Object.entries(foodDisplay).map(_ref2 => {\n        let [key, value] = _ref2;\n        return Object.entries(value).map(_ref3 => {\n          let [key2, value2] = _ref3;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttons\",\n      onClick: () => {\n        combineCalculate(true);\n      },\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), calculate ? displayCalculate() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainForm, \"d8ElEnhARYcRatrJ/1M6TP9fok0=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = MainForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","TextField","MainForm","props","value","diningHall","bind","bindDiningHall","reset","resetDiningHall","date","bindDate","resetDate","meal","bindMeal","resetMeal","cals","setCals","protein","setProtein","carbs","setCarbs","fats","setFats","calculate","setCalculate","menus","setMenus","category","name","menuItem","itemSizes","nutritionalInfo","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","Chicken","Beef","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","combineCalculate","boolVal","calculateTotal","console","log","displayCalculate","updateMenus","tempFoodFacts","tempFoodDisplay","tempFoodAmounts","map","categoryItem","index","tempCategoryObject","tempFoodFactsSingle","tempMenuItem","push","foodFactsObject","nutritionalItem","fetchMenus","replace","toUpperCase","data","amountInput","val","num","target","printMissing","missing","Object","entries","key","undefined","Math","round","key2","value2"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\nimport TextField from '@mui/material/TextField';\n\n\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n\n    const [calculate, setCalculate] = useState(false)\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1, \n        Beef: 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const combineCalculate = (boolVal) => {\n        setCalculate(boolVal)\n        let [cals, protein, carbs, fats] = calculateTotal()\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        console.log(carbs)\n        return\n    }\n\n    const displayCalculate = () => {\n        return (\n            <>\n                <div className=\"nutrition-header\">Nutrition Facts</div>\n                <ul className=\"nutrition-items\">\n                    {/* <li>{names}</li> */}\n                    <li>Calories: {cals}</li>\n                    <li>Protein: {protein}</li>\n                    <li>Total Carbohydrate: {carbs}</li>\n                    <li>Total Fat: {fats}</li>\n                </ul>\n            </>\n        )\n    }\n    const updateMenus = () => {\n        // tempFoodDisplay = {}\n        let tempFoodFacts = {}\n        let tempFoodDisplay = {}\n        let tempFoodAmounts = {}\n        setFoodAmounts({})\n        console.log(foodAmounts)\n        menus[0].category.map((categoryItem, index) => {\n            // foodAmounts[categoryItem.name] = 0\n            let tempCategoryObject = {}\n            let tempFoodFactsSingle = {}\n            tempCategoryObject[categoryItem.name] = []\n            categoryItem.menuItem.map((menuItem, index) => {\n                const tempMenuItem = {}\n                tempMenuItem[menuItem.name] = 0\n                tempFoodAmounts = ({...tempFoodAmounts, ...tempMenuItem})\n                tempCategoryObject[categoryItem.name].push(menuItem.name)\n                let foodFactsObject = {}\n                foodFactsObject[menuItem.name] = {}\n                \n                menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                    foodFactsObject[menuItem.name][\"Beef\"] = \"three\"\n                    // console.log(nutritionalItem.value)\n                    // let includeItem = false\n                    if (nutritionalItem.name === \"Calories\"){\n                        // console.log(nutritionalItem.value)\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Protein\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Carbohydrate\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Fat\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n\n                    // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                    // const newFoodFacts = {\n                    //     ...foodFacts,\n                    //     ...(includeItem && {\"three\": nutritionalItem['value']})\n                    // }\n                    // foodFacts = newFoodFacts\n                })\n                tempFoodFactsSingle = {...tempFoodFactsSingle, ...foodFactsObject}\n                // setFoodFacts({...foodFacts, ...foodFactsObject})\n            })\n            tempFoodFacts = {...tempFoodFacts, ...tempFoodFactsSingle}\n            console.log(tempFoodFacts)\n            // console.log(tempCategoryObject)\n            tempFoodDisplay = {...tempFoodDisplay, ...tempCategoryObject}\n        })\n        setFoodFacts({...tempFoodFacts})\n        setFoodDisplay({...tempFoodDisplay})\n        setFoodAmounts({...tempFoodAmounts})\n        // console.log(tempFoodAmounts)\n        // console.log(foodAmounts)\n        // console.log(foodFacts)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodFacts)\n    }\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input className=\"amount-form-single\" type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if(val !== 0){\n                if(foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Calories')\n                }\n                if(foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Protein')\n                }\n                if(foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if(foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return [cals, protein, carbs, fats]\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [menus]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit} className=\"main-form\">\n                <label>\n                    Dining Hall:\n                    <select>\n                        <option value=\"grapefruit\">Grapefruit</option>\n                        <option value=\"lime\">Lime</option>\n                        <option selected value=\"coconut\">Coconut</option>\n                        <option value=\"mango\">Mango</option>\n                    </select>\n                    {/* <input type=\"text\" {...bindDiningHall} /> */}\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n            </form>\n            <button className=\"buttons\" onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            <button className=\"buttons\" onClick={() => updateMenus()}>Update Menus</button>\n            {/* {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            } */}\n            <form className=\"amount-form\">\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button className=\"buttons\" onClick={() => {\n                combineCalculate(true)\n            } }>Calculate</button>\n            {\n                calculate ?\n                displayCalculate() :\n                null\n            }\n            {/* <div></div> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MainForm(props) {\n  _s();\n\n  const {\n    value: diningHall,\n    bind: bindDiningHall,\n    reset: resetDiningHall\n  } = useInput('');\n  const {\n    value: date,\n    bind: bindDate,\n    reset: resetDate\n  } = useInput('');\n  const {\n    value: meal,\n    bind: bindMeal,\n    reset: resetMeal\n  } = useInput(''); // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [1, 2, 3]\n    }]\n  }]);\n  let [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  let [foodAmounts, setFoodAmounts] = useState({\n    \"Chicken\": 1,\n    \"Beef\": 2\n  });\n  const [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    }\n  });\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const fetchMenus = async (diningHall, date, meal) => {\n    diningHall = diningHall.replace(' ', '%20');\n    meal = meal.toUpperCase();\n    const data = await getMenus(diningHall, date, meal);\n    setMenus(data);\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: num => foodAmounts.val = num\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0;\n    foodAmounts.map((item, index) => {\n      cals += foodFacts.item.Calories;\n      protein += foodFacts.item.Protein;\n      carbs += foodFacts.item.Carbs;\n      fats += foodFacts.item.Fats;\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Total Calories: \", cals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Protein: \", protein]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Carbs: \", carbs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Fats: \", fats]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }; // useEffect(() => {\n  //     // Update the document title using the browser API\n  //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n  // }, [fetchMenus]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dining Hall:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDiningHall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Meal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchMenus(diningHall, date, meal),\n        children: \"Get Menus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), // let url = \n    menus[0].category.map((categoryItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryItem.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }, this)), // tempFoodDisplay = {}\n    menus[0].category.map((categoryItem, index) => {\n      foodAmounts[categoryItem.menuItem[0].name] = 0;\n      let tempCategory = categoryItem.name;\n      let tempCategoryObject = {};\n      tempCategoryObject[tempCategory] = [];\n      categoryItem.menuItem.map((menuItem, index) => {\n        tempCategoryObject[tempCategory].push(menuItem.name);\n      });\n      foodDisplay = Object.assign(foodDisplay, tempCategoryObject);\n    }), Object.entries(foodDisplay).map(_ref => {\n      let [key, value] = _ref;\n      return Object.entries(value).map(_ref2 => {\n        let [key2, value2] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: value2\n        }, key2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this);\n      });\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: Object.entries(foodDisplay).map(_ref3 => {\n        let [key, value] = _ref3;\n        return Object.entries(value).map(_ref4 => {\n          let [key2, value2] = _ref4;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), calculateTotal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainForm, \"YIH4EEOKIeNDKCXC2GIXPu9ck4E=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = MainForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","MainForm","props","value","diningHall","bind","bindDiningHall","reset","resetDiningHall","date","bindDate","resetDate","meal","bindMeal","resetMeal","menus","setMenus","category","name","menuItem","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","fetchMenus","replace","toUpperCase","data","amountInput","val","num","calculateTotal","cals","protein","carbs","fats","map","item","index","Calories","Protein","Carbs","Fats","categoryItem","tempCategory","tempCategoryObject","push","Object","assign","entries","key","key2","value2"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n    const [menus, setMenus] = useState([{category: \n        [\n        {\n            name: \"\",\n            menuItem: [1,2,3]\n        }\n        ]\n    }]);\n    let [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    let [foodAmounts, setFoodAmounts] = useState({\n        \"Chicken\": 1, \n        \"Beef\": 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label>\n                {val}:\n                <input type=\"number\" onChange={num => (\n                    foodAmounts.val = num\n                )} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        foodAmounts.map((item, index) => {\n            cals += foodFacts.item.Calories\n            protein += foodFacts.item.Protein\n            carbs += foodFacts.item.Carbs\n            fats += foodFacts.item.Fats\n        })\n        return (\n            <ul>\n                <li>Total Calories: {cals}</li>\n                <li>Protein: {protein}</li>\n                <li>Carbs: {carbs}</li>\n                <li>Fats: {fats}</li>\n            </ul>\n        )\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [fetchMenus]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Dining Hall:\n                    <input type=\"text\" {...bindDiningHall} />\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n                <br></br>\n                <button onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            </form>\n            {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                // tempFoodDisplay = {}\n                menus[0].category.map((categoryItem, index) => {\n                    foodAmounts[categoryItem.menuItem[0].name] = 0\n                    let tempCategory = categoryItem.name\n                    let tempCategoryObject = {}\n                    tempCategoryObject[tempCategory] = []\n                    categoryItem.menuItem.map((menuItem, index) => {\n                        tempCategoryObject[tempCategory].push(menuItem.name)\n                    })\n                    foodDisplay = (Object.assign(foodDisplay, tempCategoryObject))\n                })\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            }\n            <form>\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            {calculateTotal()}\n            {/* <div></div> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
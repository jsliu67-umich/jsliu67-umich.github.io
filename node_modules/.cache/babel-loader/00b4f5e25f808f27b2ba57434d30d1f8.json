{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MainForm(props) {\n  _s();\n\n  const {\n    value: diningHall,\n    bind: bindDiningHall,\n    reset: resetDiningHall\n  } = useInput('');\n  const {\n    value: date,\n    bind: bindDate,\n    reset: resetDate\n  } = useInput('');\n  const {\n    value: meal,\n    bind: bindMeal,\n    reset: resetMeal\n  } = useInput(''); // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\"\n    }]\n  }]);\n  const [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  const [foodAmounts, setFoodAmounts] = useState({\n    \"Chicken\": 1,\n    \"Beef\": 2\n  });\n  const [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25\n    }\n  });\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const fetchMenus = async (diningHall, date, meal) => {\n    diningHall = diningHall.replace(' ', '%20');\n    meal = meal.toUpperCase();\n    const data = await getMenus(diningHall, date, meal);\n    setMenus(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dining Hall:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDiningHall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Meal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchMenus(diningHall, date, meal),\n        children: \"Get Menus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), // let url = \n    menus[0].category.map((categoryItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryItem.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this)), menus[0].category.map((categoryItem, index) => {\n      foodAmounts[categoryItem.menuItem[0].name] = 0;\n      let category = categoryItem.name;\n      let tempCategory = {\n        category: 0\n      };\n      categoryItem.menuItem.map((menuItem, index) => {});\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: foodFacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainForm, \"yUHDG7W3zCijqYc+eignW6ebuD8=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = MainForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","MainForm","props","value","diningHall","bind","bindDiningHall","reset","resetDiningHall","date","bindDate","resetDate","meal","bindMeal","resetMeal","menus","setMenus","category","name","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","fetchMenus","replace","toUpperCase","data","map","categoryItem","index","menuItem","tempCategory"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n    const [menus, setMenus] = useState([{category: \n        [\n        {name: \"\"}\n        ]\n    }]);\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        \"Chicken\": 1, \n        \"Beef\": 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n        }\n    })\n\n\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Dining Hall:\n                    <input type=\"text\" {...bindDiningHall} />\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n                <br></br>\n                <button onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            </form>\n            {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                menus[0].category.map((categoryItem, index) => {\n                    foodAmounts[categoryItem.menuItem[0].name] = 0\n                    let category = categoryItem.name\n                    let tempCategory = {category: 0}\n                    categoryItem.menuItem.map((menuItem, index) => {\n                        \n                    })\n                })\n            }\n            <div>{foodFacts}</div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
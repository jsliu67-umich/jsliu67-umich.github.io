{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/AddFoodForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AddFoodForm(props) {\n  _s();\n\n  const [cals, setCals] = useState(0.0);\n  const [protein, setProtein] = useState(0.0);\n  const [carbs, setCarbs] = useState(0.0);\n  const [fats, setFats] = useState(0.0);\n  const [calculate, setCalculate] = useState(false);\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [{\n        name: \"\",\n        itemSizes: [{\n          nutritionalInfo: [{\n            name: \"\",\n            value: \"\"\n          }]\n        }]\n      }]\n    }, {}]\n  }]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const combineCalculate = boolVal => {\n    setCalculate(boolVal);\n    let [cals, protein, carbs, fats] = calculateTotal();\n    setCals(cals);\n    setProtein(protein);\n    setCarbs(carbs);\n    setFats(fats);\n    console.log(carbs);\n    return;\n  };\n\n  const displayCalculate = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nutrition-header\",\n        children: \"Nutrition Facts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nutrition-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Calories: \", cals]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Protein: \", protein]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Carbohydrate: \", carbs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Fat: \", fats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"amount-form-single\",\n        type: \"text\",\n        onChange: num => {\n          // console.log(num.target.value)\n          let tempFoodAmounts = foodAmounts;\n          tempFoodAmounts[val] = num.target.value; // console.log(tempFoodAmounts)\n\n          setFoodAmounts(tempFoodAmounts);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, val, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0; // setCalculate(false)\n\n    console.log(foodAmounts);\n\n    function printMissing(missing, value) {\n      console.log(`${missing}: ${value} missing`);\n    }\n\n    Object.entries(foodAmounts).map(_ref => {\n      let [key, val] = _ref;\n\n      // let object = foodFacts[key]\n      // console.log(key)\n      // console.log(val)\n      // console.log(protein)\n      // console.log(foodFacts[key][\"Protein\"])\n      // if value missing, console.log it. else, += it\n      if (val !== 0) {\n        if (foodFacts[key][\"Calories\"] !== undefined) {\n          // console.log(val)\n          // rounds number to 2 decimal places\n          // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n          cals += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Calories');\n        }\n\n        if (foodFacts[key][\"Protein\"] !== undefined) {\n          // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n          protein += Math.round(foodFacts[key][\"Protein\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Protein');\n        }\n\n        if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n          // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n          carbs += Math.round(foodFacts[key][\"Total Carbohydrate\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Carbohydrate');\n        }\n\n        if (foodFacts[key][\"Total Fat\"] !== undefined) {\n          // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n          fats += Math.round(foodFacts[key][\"Total Fat\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Fat');\n        }\n      } // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n      // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n      // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n      // cals += foodFacts[key][\"Calories\"] * val\n      // protein += foodFacts[key][\"Protein\"] * val\n      // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // fats += foodFacts[key][\"Total Fat\"] * val\n      // console.log(cals)\n      // names.push(key + '|')\n      // console.log(foodFacts)\n      // console.log(foodAmounts)\n      // console.log(key)\n      // console.log(object[\"Calories\"])\n      // protein += (foodFacts[key].Protein * val)\n      // carbs += (foodFacts[key].Carbs * val)\n      // fats += (foodFacts[key].Fats * val)\n\n    });\n    return [cals, protein, carbs, fats];\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"amount-form\",\n      children: Object.entries(foodDisplay).map(_ref2 => {\n        let [key, value] = _ref2;\n        return Object.entries(value).map(_ref3 => {\n          let [key2, value2] = _ref3;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttons\",\n      onClick: () => {\n        combineCalculate(true);\n      },\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), calculate ? displayCalculate() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddFoodForm, \"Jt3a9sBuGGK92ieEZrw6E0qDBOY=\");\n\n_c = AddFoodForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFoodForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/AddFoodForm.jsx"],"names":["React","useState","useEffect","useInput","getMenus","AddFoodForm","props","cals","setCals","protein","setProtein","carbs","setCarbs","fats","setFats","calculate","setCalculate","menus","setMenus","category","name","menuItem","itemSizes","nutritionalInfo","value","handleSubmit","evt","preventDefault","combineCalculate","boolVal","calculateTotal","console","log","displayCalculate","amountInput","val","num","tempFoodAmounts","foodAmounts","target","setFoodAmounts","printMissing","missing","Object","entries","map","key","foodFacts","undefined","Math","round","foodDisplay","key2","value2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests'\n\nexport function AddFoodForm(props) {\n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n    const [calculate, setCalculate] = useState(false)\n\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const combineCalculate = (boolVal) => {\n        setCalculate(boolVal)\n        let [cals, protein, carbs, fats] = calculateTotal()\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        console.log(carbs)\n        return\n    }\n\n    const displayCalculate = () => {\n        return (\n            <>\n                <div className=\"nutrition-header\">Nutrition Facts</div>\n                <ul className=\"nutrition-items\">\n                    {/* <li>{names}</li> */}\n                    <li>Calories: {cals}</li>\n                    <li>Protein: {protein}</li>\n                    <li>Total Carbohydrate: {carbs}</li>\n                    <li>Total Fat: {fats}</li>\n                </ul>\n            </>\n        )\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input className=\"amount-form-single\" type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if (val !== 0) {\n                if (foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Calories')\n                }\n                if (foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Protein\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Protein')\n                }\n                if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if (foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val) * 100) / 100\n                }\n                else {\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return [cals, protein, carbs, fats]\n    }\n\n    return (\n        <div>\n            <form className=\"amount-form\">\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button className=\"buttons\" onClick={() => {\n                combineCalculate(true)\n            }}>Calculate</button>\n            {\n                calculate ?\n                    displayCalculate() :\n                    null\n            }\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}
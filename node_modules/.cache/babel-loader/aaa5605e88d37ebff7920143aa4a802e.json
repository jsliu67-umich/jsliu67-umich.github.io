{"ast":null,"code":"import _asyncToGenerator from\"/Users/jsliu/Desktop/dining-hall-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"/Users/jsliu/Desktop/dining-hall-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/jsliu/Desktop/dining-hall-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/jsliu/Desktop/dining-hall-app/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect}from\"react\";import{useInput}from'./input-hook';import{getMenus}from'../utils/requests';import TextField from'@mui/material/TextField';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export function MainForm(props){var _useInput=useInput(''),diningHall=_useInput.value,bindDiningHall=_useInput.bind,resetDiningHall=_useInput.reset;var _useInput2=useInput(''),date=_useInput2.value,bindDate=_useInput2.bind,resetDate=_useInput2.reset;var _useInput3=useInput(''),meal=_useInput3.value,bindMeal=_useInput3.bind,resetMeal=_useInput3.reset;// const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \nvar _useState=useState(0.0),_useState2=_slicedToArray(_useState,2),cals=_useState2[0],setCals=_useState2[1];var _useState3=useState(0.0),_useState4=_slicedToArray(_useState3,2),protein=_useState4[0],setProtein=_useState4[1];var _useState5=useState(0.0),_useState6=_slicedToArray(_useState5,2),carbs=_useState6[0],setCarbs=_useState6[1];var _useState7=useState(0.0),_useState8=_slicedToArray(_useState7,2),fats=_useState8[0],setFats=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),calculate=_useState10[0],setCalculate=_useState10[1];var _useState11=useState([{category:[{name:\"\",menuItem:[{name:\"\",itemSizes:[{nutritionalInfo:[{name:\"\",value:\"\"}]}]}]},{}]}]),_useState12=_slicedToArray(_useState11,2),menus=_useState12[0],setMenus=_useState12[1];var _useState13=useState({\"Soup\":{\"First Soup\":[\"Chicken\",\"Beef\"],\"Second Soup\":[\"Veggies\",\"Taro\"]}}),_useState14=_slicedToArray(_useState13,2),foodDisplay=_useState14[0],setFoodDisplay=_useState14[1];var _useState15=useState({Chicken:1,Beef:2}),_useState16=_slicedToArray(_useState15,2),foodAmounts=_useState16[0],setFoodAmounts=_useState16[1];var _useState17=useState({\"Chicken\":{\"Calories\":300,\"Protein\":20,\"Carbs\":40,\"Fats\":10},\"Beef\":{\"Calories\":250,\"Protein\":25,\"Carbs\":40,\"Fats\":10}}),_useState18=_slicedToArray(_useState17,2),foodFacts=_useState18[0],setFoodFacts=_useState18[1];var handleSubmit=function handleSubmit(evt){evt.preventDefault();// alert(`Submitting Name ${value}`);\n// resetDiningHall();\n// resetDate();\n// resetMeal();\n};var combineCalculate=function combineCalculate(boolVal){setCalculate(boolVal);var _calculateTotal=calculateTotal(),_calculateTotal2=_slicedToArray(_calculateTotal,4),cals=_calculateTotal2[0],protein=_calculateTotal2[1],carbs=_calculateTotal2[2],fats=_calculateTotal2[3];setCals(cals);setProtein(protein);setCarbs(carbs);setFats(fats);console.log(carbs);return;};var displayCalculate=function displayCalculate(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"nutrition-header\",children:\"Nutrition Facts\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"nutrition-items\",children:[/*#__PURE__*/_jsxs(\"li\",{children:[\"Calories: \",cals]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"Protein: \",protein]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"Total Carbohydrate: \",carbs]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"Total Fat: \",fats]})]})]});};var updateMenus=function updateMenus(){// tempFoodDisplay = {}\nvar tempFoodFacts={};var tempFoodDisplay={};var tempFoodAmounts={};setFoodAmounts({});console.log(foodAmounts);menus[0].category.map(function(categoryItem,index){// foodAmounts[categoryItem.name] = 0\nvar tempCategoryObject={};var tempFoodFactsSingle={};tempCategoryObject[categoryItem.name]=[];categoryItem.menuItem.map(function(menuItem,index){var tempMenuItem={};tempMenuItem[menuItem.name]=0;tempFoodAmounts=_objectSpread(_objectSpread({},tempFoodAmounts),tempMenuItem);tempCategoryObject[categoryItem.name].push(menuItem.name);var foodFactsObject={};foodFactsObject[menuItem.name]={};menuItem.itemSizes[0].nutritionalInfo.map(function(nutritionalItem,index){foodFactsObject[menuItem.name][\"Beef\"]=\"three\";// console.log(nutritionalItem.value)\n// let includeItem = false\nif(nutritionalItem.name===\"Calories\"){// console.log(nutritionalItem.value)\n// includeItem = true\nfoodFactsObject[menuItem.name][nutritionalItem.name]=nutritionalItem.value;}else if(nutritionalItem.name===\"Protein\"){// includeItem = true\nfoodFactsObject[menuItem.name][nutritionalItem.name]=nutritionalItem.value;}else if(nutritionalItem.name===\"Total Carbohydrate\"){// includeItem = true\nfoodFactsObject[menuItem.name][nutritionalItem.name]=nutritionalItem.value;}else if(nutritionalItem.name===\"Total Fat\"){// includeItem = true\nfoodFactsObject[menuItem.name][nutritionalItem.name]=nutritionalItem.value;}// foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n// const newFoodFacts = {\n//     ...foodFacts,\n//     ...(includeItem && {\"three\": nutritionalItem['value']})\n// }\n// foodFacts = newFoodFacts\n});tempFoodFactsSingle=_objectSpread(_objectSpread({},tempFoodFactsSingle),foodFactsObject);// setFoodFacts({...foodFacts, ...foodFactsObject})\n});tempFoodFacts=_objectSpread(_objectSpread({},tempFoodFacts),tempFoodFactsSingle);console.log(tempFoodFacts);// console.log(tempCategoryObject)\ntempFoodDisplay=_objectSpread(_objectSpread({},tempFoodDisplay),tempCategoryObject);});setFoodFacts(_objectSpread({},tempFoodFacts));setFoodDisplay(_objectSpread({},tempFoodDisplay));setFoodAmounts(_objectSpread({},tempFoodAmounts));// console.log(tempFoodAmounts)\n// console.log(foodAmounts)\n// console.log(foodFacts)\n// console.log(foodDisplay)\n// console.log(foodDisplay)\n// console.log(foodDisplay)\n// console.log(foodFacts)\n};var fetchMenus=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(diningHall,date,meal){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:diningHall=diningHall.replace(' ','%20');meal=meal.toUpperCase();_context.next=4;return getMenus(diningHall,date,meal);case 4:data=_context.sent;setMenus(data);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchMenus(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var amountInput=function amountInput(val){return/*#__PURE__*/_jsxs(\"label\",{children:[val,\":\",/*#__PURE__*/_jsx(\"input\",{className:\"amount-form-single\",type:\"text\",onChange:function onChange(num){// console.log(num.target.value)\nvar tempFoodAmounts=foodAmounts;tempFoodAmounts[val]=num.target.value;// console.log(tempFoodAmounts)\nsetFoodAmounts(tempFoodAmounts);}})]},val);};var calculateTotal=function calculateTotal(){var cals=0,protein=0,carbs=0,fats=0;// setCalculate(false)\nconsole.log(foodAmounts);function printMissing(missing,value){console.log(\"\".concat(missing,\": \").concat(value,\" missing\"));}Object.entries(foodAmounts).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],val=_ref3[1];// let object = foodFacts[key]\n// console.log(key)\n// console.log(val)\n// console.log(protein)\n// console.log(foodFacts[key][\"Protein\"])\n// if value missing, console.log it. else, += it\nif(val!==0){if(foodFacts[key][\"Calories\"]!==undefined){// console.log(val)\n// rounds number to 2 decimal places\n// setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\ncals+=Math.round(foodFacts[key][\"Calories\"]*val*100)/100;}else{printMissing(key,'Calories');}if(foodFacts[key][\"Protein\"]!==undefined){// setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\nprotein+=Math.round(foodFacts[key][\"Calories\"]*val*100)/100;}else{printMissing(key,'Protein');}if(foodFacts[key][\"Total Carbohydrate\"]!==undefined){// setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\ncarbs+=Math.round(foodFacts[key][\"Total Carbohydrate\"]*val*100)/100;}else{printMissing(key,'Total Carbohydrate');}if(foodFacts[key][\"Total Fat\"]!==undefined){// setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\nfats+=Math.round(foodFacts[key][\"Total Fat\"]*val*100)/100;}else{printMissing(key,'Total Fat');}}// (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n// (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n// (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n// (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n// cals += foodFacts[key][\"Calories\"] * val\n// protein += foodFacts[key][\"Protein\"] * val\n// carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n// fats += foodFacts[key][\"Total Fat\"] * val\n// console.log(cals)\n// names.push(key + '|')\n// console.log(foodFacts)\n// console.log(foodAmounts)\n// console.log(key)\n// console.log(object[\"Calories\"])\n// protein += (foodFacts[key].Protein * val)\n// carbs += (foodFacts[key].Carbs * val)\n// fats += (foodFacts[key].Fats * val)\n});return[cals,protein,carbs,fats];};// useEffect(() => {\n//     // Update the document title using the browser API\n//     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n// }, [menus]);\n// <label>\n//     Dining Hall:\n//     {/* {...bindDiningHall} */}\n//     <select {...bindDiningHall}>\n//         <option defaultValue=\"Bursley\">Bursley</option>\n//         <option value=\"South Quad\">South Quad</option>\n//         <option value=\"East Quad\">East Quad</option>\n//         <option value=\"Mosher Jordan\">Mosher Jordan</option>\n//     </select>\n//     {/* <input type=\"text\" {...bindDiningHall} /> */}\n// </label>\n// <label>\n//     Date:\n//     <input type=\"date\" {...bindDate} />\n// </label>\n// <label>\n//     Meal:\n//     <select {...bindMeal}>\n//         <option value=\"Breakfast\">Breakfast</option>\n//         <option value=\"Brunch\">Brunch</option>\n//         <option value=\"Lunch\">Lunch</option>\n//         <option value=\"Linner\">Linner</option>\n//         <option value=\"Dinner\">Dinner</option>\n//     </select>\n// </label>\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"main-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Dining Hall:\",/*#__PURE__*/_jsx(\"input\",_objectSpread({type:\"text\"},bindDiningHall))]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Date:\",/*#__PURE__*/_jsx(\"input\",_objectSpread({type:\"text\"},bindDate))]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Meal:\",/*#__PURE__*/_jsx(\"input\",_objectSpread({type:\"text\"},bindMeal))]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"buttons\",onClick:function onClick(){return fetchMenus(diningHall,date,meal);},children:\"Get Menus\"}),/*#__PURE__*/_jsx(\"button\",{className:\"buttons\",onClick:function onClick(){return updateMenus();},children:\"Update Menus\"}),/*#__PURE__*/_jsx(\"form\",{className:\"amount-form\",children:Object.entries(foodDisplay).map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),key=_ref5[0],value=_ref5[1];return Object.entries(value).map(function(_ref6){var _ref7=_slicedToArray(_ref6,2),key2=_ref7[0],value2=_ref7[1];return amountInput(value2);});})}),/*#__PURE__*/_jsx(\"button\",{className:\"buttons\",onClick:function onClick(){combineCalculate(true);},children:\"Calculate\"}),calculate?displayCalculate():null]});}","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","TextField","MainForm","props","diningHall","value","bindDiningHall","bind","resetDiningHall","reset","date","bindDate","resetDate","meal","bindMeal","resetMeal","cals","setCals","protein","setProtein","carbs","setCarbs","fats","setFats","calculate","setCalculate","category","name","menuItem","itemSizes","nutritionalInfo","menus","setMenus","foodDisplay","setFoodDisplay","Chicken","Beef","foodAmounts","setFoodAmounts","foodFacts","setFoodFacts","handleSubmit","evt","preventDefault","combineCalculate","boolVal","calculateTotal","console","log","displayCalculate","updateMenus","tempFoodFacts","tempFoodDisplay","tempFoodAmounts","map","categoryItem","index","tempCategoryObject","tempFoodFactsSingle","tempMenuItem","push","foodFactsObject","nutritionalItem","fetchMenus","replace","toUpperCase","data","amountInput","val","num","target","printMissing","missing","Object","entries","key","undefined","Math","round","key2","value2"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\nimport TextField from '@mui/material/TextField';\n\n\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n\n    const [calculate, setCalculate] = useState(false)\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1, \n        Beef: 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    const combineCalculate = (boolVal) => {\n        setCalculate(boolVal)\n        let [cals, protein, carbs, fats] = calculateTotal()\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        console.log(carbs)\n        return\n    }\n\n    const displayCalculate = () => {\n        return (\n            <>\n                <div className=\"nutrition-header\">Nutrition Facts</div>\n                <ul className=\"nutrition-items\">\n                    {/* <li>{names}</li> */}\n                    <li>Calories: {cals}</li>\n                    <li>Protein: {protein}</li>\n                    <li>Total Carbohydrate: {carbs}</li>\n                    <li>Total Fat: {fats}</li>\n                </ul>\n            </>\n        )\n    }\n    const updateMenus = () => {\n        // tempFoodDisplay = {}\n        let tempFoodFacts = {}\n        let tempFoodDisplay = {}\n        let tempFoodAmounts = {}\n        setFoodAmounts({})\n        console.log(foodAmounts)\n        menus[0].category.map((categoryItem, index) => {\n            // foodAmounts[categoryItem.name] = 0\n            let tempCategoryObject = {}\n            let tempFoodFactsSingle = {}\n            tempCategoryObject[categoryItem.name] = []\n            categoryItem.menuItem.map((menuItem, index) => {\n                const tempMenuItem = {}\n                tempMenuItem[menuItem.name] = 0\n                tempFoodAmounts = ({...tempFoodAmounts, ...tempMenuItem})\n                tempCategoryObject[categoryItem.name].push(menuItem.name)\n                let foodFactsObject = {}\n                foodFactsObject[menuItem.name] = {}\n                \n                menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                    foodFactsObject[menuItem.name][\"Beef\"] = \"three\"\n                    // console.log(nutritionalItem.value)\n                    // let includeItem = false\n                    if (nutritionalItem.name === \"Calories\"){\n                        // console.log(nutritionalItem.value)\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Protein\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Carbohydrate\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Fat\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n\n                    // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                    // const newFoodFacts = {\n                    //     ...foodFacts,\n                    //     ...(includeItem && {\"three\": nutritionalItem['value']})\n                    // }\n                    // foodFacts = newFoodFacts\n                })\n                tempFoodFactsSingle = {...tempFoodFactsSingle, ...foodFactsObject}\n                // setFoodFacts({...foodFacts, ...foodFactsObject})\n            })\n            tempFoodFacts = {...tempFoodFacts, ...tempFoodFactsSingle}\n            console.log(tempFoodFacts)\n            // console.log(tempCategoryObject)\n            tempFoodDisplay = {...tempFoodDisplay, ...tempCategoryObject}\n        })\n        setFoodFacts({...tempFoodFacts})\n        setFoodDisplay({...tempFoodDisplay})\n        setFoodAmounts({...tempFoodAmounts})\n        // console.log(tempFoodAmounts)\n        // console.log(foodAmounts)\n        // console.log(foodFacts)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodFacts)\n    }\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input className=\"amount-form-single\" type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if(val !== 0){\n                if(foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Calories')\n                }\n                if(foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Protein')\n                }\n                if(foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if(foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        return [cals, protein, carbs, fats]\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [menus]);\n\n\n// <label>\n//     Dining Hall:\n//     {/* {...bindDiningHall} */}\n//     <select {...bindDiningHall}>\n//         <option defaultValue=\"Bursley\">Bursley</option>\n//         <option value=\"South Quad\">South Quad</option>\n//         <option value=\"East Quad\">East Quad</option>\n//         <option value=\"Mosher Jordan\">Mosher Jordan</option>\n//     </select>\n//     {/* <input type=\"text\" {...bindDiningHall} /> */}\n// </label>\n// <label>\n//     Date:\n//     <input type=\"date\" {...bindDate} />\n// </label>\n// <label>\n//     Meal:\n//     <select {...bindMeal}>\n//         <option value=\"Breakfast\">Breakfast</option>\n//         <option value=\"Brunch\">Brunch</option>\n//         <option value=\"Lunch\">Lunch</option>\n//         <option value=\"Linner\">Linner</option>\n//         <option value=\"Dinner\">Dinner</option>\n//     </select>\n// </label>\n    return (\n        <div>\n            <form onSubmit={handleSubmit} className=\"main-form\">\n                <label>\n                    Dining Hall:\n                    <input type=\"text\" {...bindDiningHall} />\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n            </form>\n            <button className=\"buttons\" onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n            <button className=\"buttons\" onClick={() => updateMenus()}>Update Menus</button>\n            {/* {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            } */}\n            <form className=\"amount-form\">\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button className=\"buttons\" onClick={() => {\n                combineCalculate(true)\n            } }>Calculate</button>\n            {\n                calculate ?\n                displayCalculate() :\n                null\n            }\n            {/* <div></div> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}
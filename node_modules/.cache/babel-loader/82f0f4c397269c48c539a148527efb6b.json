{"ast":null,"code":"var _jsxFileName = \"/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport { getMenus } from '../utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MainForm(props) {\n  _s();\n\n  const {\n    value: diningHall,\n    bind: bindDiningHall,\n    reset: resetDiningHall\n  } = useInput('');\n  const {\n    value: date,\n    bind: bindDate,\n    reset: resetDate\n  } = useInput('');\n  const {\n    value: meal,\n    bind: bindMeal,\n    reset: resetMeal\n  } = useInput(''); // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n\n  const [cals, setCals] = useState(0.0);\n  const [protein, setProtein] = useState(0.0);\n  const [carbs, setCarbs] = useState(0.0);\n  const [fats, setFats] = useState(0.0);\n  const [calculate, setCalculate] = useState(false);\n  const [menus, setMenus] = useState([{\n    category: [{\n      name: \"\",\n      menuItem: [{\n        name: \"\",\n        itemSizes: [{\n          nutritionalInfo: [{\n            name: \"\",\n            value: \"\"\n          }]\n        }]\n      }]\n    }, {}]\n  }]);\n  const [foodDisplay, setFoodDisplay] = useState({\n    \"Soup\": {\n      \"First Soup\": [\"Chicken\", \"Beef\"],\n      \"Second Soup\": [\"Veggies\", \"Taro\"]\n    }\n  });\n  const [foodAmounts, setFoodAmounts] = useState({\n    Chicken: 1,\n    Beef: 2\n  });\n  const [foodFacts, setFoodFacts] = useState({\n    \"Chicken\": {\n      \"Calories\": 300,\n      \"Protein\": 20,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    },\n    \"Beef\": {\n      \"Calories\": 250,\n      \"Protein\": 25,\n      \"Carbs\": 40,\n      \"Fats\": 10\n    }\n  });\n\n  const combineCalculate = bool => {\n    calculateTotal();\n    setCalculate(bool);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // alert(`Submitting Name ${value}`);\n    // resetDiningHall();\n    // resetDate();\n    // resetMeal();\n  };\n\n  const updateMenus = () => {\n    // tempFoodDisplay = {}\n    let tempFoodFacts = {};\n    let tempFoodDisplay = {};\n    let tempFoodAmounts = {};\n    setFoodAmounts({});\n    console.log(foodAmounts);\n    menus[0].category.map((categoryItem, index) => {\n      // foodAmounts[categoryItem.name] = 0\n      let tempCategoryObject = {};\n      let tempFoodFactsSingle = {};\n      tempCategoryObject[categoryItem.name] = [];\n      categoryItem.menuItem.map((menuItem, index) => {\n        const tempMenuItem = {};\n        tempMenuItem[menuItem.name] = 0;\n        tempFoodAmounts = { ...tempFoodAmounts,\n          ...tempMenuItem\n        };\n        tempCategoryObject[categoryItem.name].push(menuItem.name);\n        let foodFactsObject = {};\n        foodFactsObject[menuItem.name] = {};\n        menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n          foodFactsObject[menuItem.name][\"Beef\"] = \"three\"; // console.log(nutritionalItem.value)\n          // let includeItem = false\n\n          if (nutritionalItem.name === \"Calories\") {\n            // console.log(nutritionalItem.value)\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Protein\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Carbohydrate\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } else if (nutritionalItem.name === \"Total Fat\") {\n            // includeItem = true\n            foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value;\n          } // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n          // const newFoodFacts = {\n          //     ...foodFacts,\n          //     ...(includeItem && {\"three\": nutritionalItem['value']})\n          // }\n          // foodFacts = newFoodFacts\n\n        });\n        tempFoodFactsSingle = { ...tempFoodFactsSingle,\n          ...foodFactsObject\n        }; // setFoodFacts({...foodFacts, ...foodFactsObject})\n      });\n      tempFoodFacts = { ...tempFoodFacts,\n        ...tempFoodFactsSingle\n      };\n      console.log(tempFoodFacts); // console.log(tempCategoryObject)\n\n      tempFoodDisplay = { ...tempFoodDisplay,\n        ...tempCategoryObject\n      };\n    });\n    setFoodFacts({ ...tempFoodFacts\n    });\n    setFoodDisplay({ ...tempFoodDisplay\n    });\n    setFoodAmounts({ ...tempFoodAmounts\n    }); // console.log(tempFoodAmounts)\n    // console.log(foodAmounts)\n    // console.log(foodFacts)\n    // console.log(foodDisplay)\n    // console.log(foodDisplay)\n    // console.log(foodDisplay)\n    // console.log(foodFacts)\n  };\n\n  const fetchMenus = async (diningHall, date, meal) => {\n    diningHall = diningHall.replace(' ', '%20');\n    meal = meal.toUpperCase();\n    const data = await getMenus(diningHall, date, meal);\n    setMenus(data);\n  };\n\n  const amountInput = val => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [val, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: num => {\n          // console.log(num.target.value)\n          let tempFoodAmounts = foodAmounts;\n          tempFoodAmounts[val] = num.target.value; // console.log(tempFoodAmounts)\n\n          setFoodAmounts(tempFoodAmounts);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, val, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this);\n  };\n\n  const calculateTotal = () => {\n    setCals(0);\n    setProtein(0);\n    setCarbs(0);\n    setFats(0);\n    let cals = 0,\n        protein = 0,\n        carbs = 0,\n        fats = 0;\n    let names = []; // setCalculate(false)\n\n    console.log(foodAmounts);\n\n    function printMissing(missing, value) {\n      console.log(`${missing}: ${value} missing`);\n    }\n\n    Object.entries(foodAmounts).map(_ref => {\n      let [key, val] = _ref;\n\n      // let object = foodFacts[key]\n      // console.log(key)\n      // console.log(val)\n      // console.log(protein)\n      // console.log(foodFacts[key][\"Protein\"])\n      // if value missing, console.log it. else, += it\n      if (val !== 0) {\n        if (foodFacts[key][\"Calories\"] !== undefined) {\n          // console.log(val)\n          // rounds number to 2 decimal places\n          // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n          cals += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Calories');\n        }\n\n        if (foodFacts[key][\"Protein\"] !== undefined) {\n          // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n          protein += Math.round(foodFacts[key][\"Calories\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Protein');\n        }\n\n        if (foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n          // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n          carbs += Math.round(foodFacts[key][\"Total Carbohydrate\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Carbohydrate');\n        }\n\n        if (foodFacts[key][\"Total Fat\"] !== undefined) {\n          // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n          fats += Math.round(foodFacts[key][\"Total Fat\"] * val * 100) / 100;\n        } else {\n          printMissing(key, 'Total Fat');\n        }\n      } // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n      // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n      // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n      // cals += foodFacts[key][\"Calories\"] * val\n      // protein += foodFacts[key][\"Protein\"] * val\n      // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n      // fats += foodFacts[key][\"Total Fat\"] * val\n      // console.log(cals)\n      // names.push(key + '|')\n      // console.log(foodFacts)\n      // console.log(foodAmounts)\n      // console.log(key)\n      // console.log(object[\"Calories\"])\n      // protein += (foodFacts[key].Protein * val)\n      // carbs += (foodFacts[key].Carbs * val)\n      // fats += (foodFacts[key].Fats * val)\n\n    });\n    setCals(cals);\n    setProtein(protein);\n    setCarbs(carbs);\n    setFats(fats);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Calories: \", cals]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Protein: \", protein]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Total Carbohydrate: \", carbs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Total Fat: \", fats]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this);\n  }; // useEffect(() => {\n  //     // Update the document title using the browser API\n  //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n  // }, [menus]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dining Hall:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDiningHall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Meal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...bindMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchMenus(diningHall, date, meal),\n        children: \"Get Menus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateMenus(),\n        children: \"Update Menus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), // let url = \n    menus[0].category.map((categoryItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: categoryItem.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }, this)), Object.entries(foodDisplay).map(_ref2 => {\n      let [key, value] = _ref2;\n      return Object.entries(value).map(_ref3 => {\n        let [key2, value2] = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: value2\n        }, key2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this);\n      });\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: Object.entries(foodDisplay).map(_ref4 => {\n        let [key, value] = _ref4;\n        return Object.entries(value).map(_ref5 => {\n          let [key2, value2] = _ref5;\n          return amountInput(value2);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => combineCalculate(true),\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), calculateTotal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainForm, \"d8ElEnhARYcRatrJ/1M6TP9fok0=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = MainForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainForm\");","map":{"version":3,"sources":["/Users/jsliu/Desktop/dining-hall-app/src/components/Form.jsx"],"names":["React","useState","useEffect","useInput","getMenus","MainForm","props","value","diningHall","bind","bindDiningHall","reset","resetDiningHall","date","bindDate","resetDate","meal","bindMeal","resetMeal","cals","setCals","protein","setProtein","carbs","setCarbs","fats","setFats","calculate","setCalculate","menus","setMenus","category","name","menuItem","itemSizes","nutritionalInfo","foodDisplay","setFoodDisplay","foodAmounts","setFoodAmounts","Chicken","Beef","foodFacts","setFoodFacts","combineCalculate","bool","calculateTotal","handleSubmit","evt","preventDefault","updateMenus","tempFoodFacts","tempFoodDisplay","tempFoodAmounts","console","log","map","categoryItem","index","tempCategoryObject","tempFoodFactsSingle","tempMenuItem","push","foodFactsObject","nutritionalItem","fetchMenus","replace","toUpperCase","data","amountInput","val","num","target","names","printMissing","missing","Object","entries","key","undefined","Math","round","key2","value2"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { useInput } from './input-hook';\nimport {getMenus} from '../utils/requests'\n\nexport function MainForm(props) {\n    const { value:diningHall, bind:bindDiningHall, reset:resetDiningHall } = useInput('');\n    const { value:date, bind:bindDate, reset:resetDate } = useInput('');    \n    const { value:meal, bind:bindMeal, reset:resetMeal } = useInput('');    \n    \n\n    // const { value:lastName, bind:bindLastName, reset:resetLastName } = useInput('');    \n    const [cals, setCals] = useState(0.0)\n    const [protein, setProtein] = useState(0.0)\n    const [carbs, setCarbs] = useState(0.0)\n    const [fats, setFats] = useState(0.0)\n\n\n    const [calculate, setCalculate] = useState(false)\n    const [menus, setMenus] = useState(\n        [{\n            category: [{\n                name: \"\",\n                menuItem: [\n                    {\n                        name: \"\",\n                        itemSizes: [{\n                            nutritionalInfo: [\n                                {\n                                    name: \"\",\n                                    value: \"\"\n                                }\n                            ]\n                        }]\n                    }\n                ]\n            }, {}\n            ]\n        }]\n    );\n    const [foodDisplay, setFoodDisplay] = useState({\n        \"Soup\": {\n            \"First Soup\": [\n                \"Chicken\", \"Beef\"\n            ],\n            \"Second Soup\": [\n                \"Veggies\", \"Taro\"\n            ]\n        }\n    })\n    const [foodAmounts, setFoodAmounts] = useState({\n        Chicken: 1, \n        Beef: 2\n    })\n    const [foodFacts, setFoodFacts] = useState({\n        \"Chicken\": {\n            \"Calories\": 300, \n            \"Protein\": 20,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        },\n        \"Beef\": {\n            \"Calories\": 250,\n            \"Protein\": 25,\n            \"Carbs\": 40,\n            \"Fats\": 10\n        }\n    })\n\n    const combineCalculate = (bool) => {\n        calculateTotal()\n        setCalculate(bool)\n    }\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // alert(`Submitting Name ${value}`);\n        // resetDiningHall();\n        // resetDate();\n        // resetMeal();\n    }\n\n    \n    const updateMenus = () => {\n        // tempFoodDisplay = {}\n        let tempFoodFacts = {}\n        let tempFoodDisplay = {}\n        let tempFoodAmounts = {}\n        setFoodAmounts({})\n        console.log(foodAmounts)\n        menus[0].category.map((categoryItem, index) => {\n            // foodAmounts[categoryItem.name] = 0\n            let tempCategoryObject = {}\n            let tempFoodFactsSingle = {}\n            tempCategoryObject[categoryItem.name] = []\n            categoryItem.menuItem.map((menuItem, index) => {\n                const tempMenuItem = {}\n                tempMenuItem[menuItem.name] = 0\n                tempFoodAmounts = ({...tempFoodAmounts, ...tempMenuItem})\n                tempCategoryObject[categoryItem.name].push(menuItem.name)\n                let foodFactsObject = {}\n                foodFactsObject[menuItem.name] = {}\n                \n                menuItem.itemSizes[0].nutritionalInfo.map((nutritionalItem, index) => {\n                    foodFactsObject[menuItem.name][\"Beef\"] = \"three\"\n                    // console.log(nutritionalItem.value)\n                    // let includeItem = false\n                    if (nutritionalItem.name === \"Calories\"){\n                        // console.log(nutritionalItem.value)\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Protein\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Carbohydrate\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n                    else if (nutritionalItem.name === \"Total Fat\"){\n                        // includeItem = true\n                        foodFactsObject[menuItem.name][nutritionalItem.name] = nutritionalItem.value    \n                    }\n\n                    // foodFacts[menuItem.name][nutritionalItem.name] = nutritionalItem.value\n                    // const newFoodFacts = {\n                    //     ...foodFacts,\n                    //     ...(includeItem && {\"three\": nutritionalItem['value']})\n                    // }\n                    // foodFacts = newFoodFacts\n                })\n                tempFoodFactsSingle = {...tempFoodFactsSingle, ...foodFactsObject}\n                // setFoodFacts({...foodFacts, ...foodFactsObject})\n            })\n            tempFoodFacts = {...tempFoodFacts, ...tempFoodFactsSingle}\n            console.log(tempFoodFacts)\n            // console.log(tempCategoryObject)\n            tempFoodDisplay = {...tempFoodDisplay, ...tempCategoryObject}\n        })\n        setFoodFacts({...tempFoodFacts})\n        setFoodDisplay({...tempFoodDisplay})\n        setFoodAmounts({...tempFoodAmounts})\n        // console.log(tempFoodAmounts)\n        // console.log(foodAmounts)\n        // console.log(foodFacts)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodDisplay)\n        // console.log(foodFacts)\n    }\n    const fetchMenus = async (diningHall, date, meal) => {\n        diningHall = diningHall.replace(' ', '%20')\n        meal = meal.toUpperCase();\n        const data = await getMenus(diningHall, date, meal)\n        setMenus(data)\n    }\n\n    const amountInput = (val) => {\n        return (\n            <label key={val}>\n                {val}:\n                <input type=\"text\" onChange={num => {\n                    // console.log(num.target.value)\n                    let tempFoodAmounts = foodAmounts\n                    tempFoodAmounts[val] = num.target.value\n                    // console.log(tempFoodAmounts)\n                    setFoodAmounts(tempFoodAmounts)\n                }} />\n            </label>\n        )\n    }\n\n    const calculateTotal = () => {\n        setCals(0)\n        setProtein(0)\n        setCarbs(0)\n        setFats(0)\n        let cals = 0, protein = 0, carbs = 0, fats = 0\n        let names = []\n        // setCalculate(false)\n        console.log(foodAmounts)\n        function printMissing(missing, value) {\n            console.log(`${missing}: ${value} missing`)\n        }\n        Object.entries(foodAmounts).map(([key, val]) => {\n            // let object = foodFacts[key]\n            // console.log(key)\n            // console.log(val)\n            // console.log(protein)\n            // console.log(foodFacts[key][\"Protein\"])\n            // if value missing, console.log it. else, += it\n            if(val !== 0){\n                if(foodFacts[key][\"Calories\"] !== undefined) {\n                    // console.log(val)\n                    // rounds number to 2 decimal places\n                    // setCals(cals + Math.round((foodFacts[key][\"Calories\"] * val)*100)/100)\n                    cals += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Calories')\n                }\n                if(foodFacts[key][\"Protein\"] !== undefined) {\n                    // setProtein(protein + Math.round((foodFacts[key][\"Protein\"] * val)*100)/100)\n                    protein += Math.round((foodFacts[key][\"Calories\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Protein')\n                }\n                if(foodFacts[key][\"Total Carbohydrate\"] !== undefined) {\n                    // setCarbs(carbs + Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100)\n                    carbs += Math.round((foodFacts[key][\"Total Carbohydrate\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Carbohydrate')\n                }\n                if(foodFacts[key][\"Total Fat\"] !== undefined) {\n                    // setFats(fats + Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100)\n                    fats += Math.round((foodFacts[key][\"Total Fat\"] * val)*100)/100\n                }\n                else{\n                    printMissing(key, 'Total Fat')\n                }\n            }\n            // (foodFacts[key][\"Calories\"] === undefined) ? printMissing(key, 'Calories') : console.log(\"Hi\")\n            // (foodFacts[key][\"Protein\"] === undefined) ? printMissing(key, 'Protein') : protein += foodFacts[key][\"Protein\"] * val\n            // (foodFacts[key][\"Total Carbohydrate\"] === undefined) ? printMissing(key, 'Total Carbohydrate') : carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // (foodFacts[key][\"Total Fat\"] === undefined) ? printMissing(key, 'Total Fat') : fats += foodFacts[key][\"Total Fat\"] * val\n            // cals += foodFacts[key][\"Calories\"] * val\n            // protein += foodFacts[key][\"Protein\"] * val\n            // carbs += foodFacts[key][\"Total Carbohydrate\"] * val\n            // fats += foodFacts[key][\"Total Fat\"] * val\n\n            // console.log(cals)\n            // names.push(key + '|')\n            // console.log(foodFacts)\n            // console.log(foodAmounts)\n            // console.log(key)\n            // console.log(object[\"Calories\"])\n            // protein += (foodFacts[key].Protein * val)\n            // carbs += (foodFacts[key].Carbs * val)\n            // fats += (foodFacts[key].Fats * val)\n        })\n        setCals(cals)\n        setProtein(protein)\n        setCarbs(carbs)\n        setFats(fats)\n        return (\n            <ul>\n                {/* <li>{names}</li> */}\n                <li>Calories: {cals}</li>\n                <li>Protein: {protein}</li>\n                <li>Total Carbohydrate: {carbs}</li>\n                <li>Total Fat: {fats}</li>\n            </ul>\n        )\n    }\n\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n    //     fetchMenus(\"Bursley\", \"2022-01-11\", \"lunch\")\n    // }, [menus]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Dining Hall:\n                    <input type=\"text\" {...bindDiningHall} />\n                </label>\n                <label>\n                    Date:\n                    <input type=\"text\" {...bindDate} />\n                </label>\n                <label>\n                    Meal:\n                    <input type=\"text\" {...bindMeal} />\n                </label>\n                <br></br>\n                <button onClick={() => fetchMenus(diningHall, date, meal)}>Get Menus</button>\n                <button onClick={() => updateMenus()}>Update Menus</button>\n            </form>\n            {\n                // let url = \n                menus[0].category.map((categoryItem, index) => (\n                    <div key={index}>\n                        {categoryItem.name}\n                    </div>\n                ))\n            }\n            {\n                Object.entries(foodDisplay).map(([key, value]) => (\n                    Object.entries(value).map(([key2, value2]) => (\n                        <div key={key2}>{value2}</div>\n                    ))\n                ))\n            }\n            <form>\n                {\n                    Object.entries(foodDisplay).map(([key, value]) => (\n                        Object.entries(value).map(([key2, value2]) => (\n                            amountInput(value2)\n                        ))\n                    ))\n                }\n            </form>\n            <button onClick={() => combineCalculate(true)}>Calculate</button>\n            {\n                calculateTotal()\n            }\n            {/* <div></div> */}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}